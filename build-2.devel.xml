<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (c) 2007-2015 AREasy Runtime
  ~
  ~ This library, AREasy Runtime and API for BMC Remedy AR System, is free software ("Licensed Software");
  ~ you can redistribute it and/or modify it under the terms of the GNU Lesser General Public
  ~ License as published by the Free Software Foundation; either version 2.1 of the License,
  ~ or (at your option) any later version.
  ~
  ~ This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  ~ including but not limited to, the implied warranty of MERCHANTABILITY, NONINFRINGEMENT,
  ~ or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  -->

<project name="1.Devel" default="2.Bin" basedir=".">

	<!-- Import Ant object file -->
	<import file="build-1.base.xml"/>


	<property name="library.jar" value="${project.name}-${project.version}.jar"/>
	<property name="documentation.pdf" value="${project.name}-${project.version}.pdf"/>


	<!-- up to dates-->
	<uptodate property="uptodate-lib" targetfile="${dist.libs.dir}/${library.jar}">
		<srcfiles dir="${src.java.dir}" includes="**/*.java"/>
		<srcfiles dir="${src.java.dir}" includes="**/*.info"/>
	</uptodate>
	<uptodate property="uptodate-doc" targetfile="${dist.doc.dir}/${documentation.pdf}">
		<srcfiles dir="${src.java.dir}" includes="**/*.java"/>
		<srcfiles dir="${src.doc.dir}" includes="**/*.html"/>
	</uptodate>


	<!-- Cleans up the distribution files without generated classes. -->
    <target name="0.Clean" description="Cleans up the distribution files (classes and documentation)">
        <delete dir="${dist.dir}"/>
        <delete dir="${build.temp.dir}"/>
	</target>


	<!-- Initializes the build. -->
    <target name="1.Init" depends="0.Base.0.Init" description="Initialize environment for tasks executed on this module">

        <tstamp/>

        <echo message="---------- ${project.name} - ${project.fullname}, version ${project.version} ----------"/>
        <echo message=""/>
        <echo message="basedir = ${basedir}"/>
		<echo message="java.home = ${java.home}"/>
	</target>


	<!-- Compiling procedure. -->
    <target name="2.Bin" depends="1.Init" unless="uptodate-lib" description="Compile library">

        <buildnumber file="build.properties"/>

        <javac classpathref="classpath.bin" srcdir="${src.java.dir}" destdir="${build.temp.dir}"
            debug="${compiler.debug}" deprecation="${compiler.deprecation}" optimize="${compiler.optimize}" nowarn="true">
        </javac>

        <!-- Copies non java files that need to be in the classes directory -->
        <copy todir="${build.temp.dir}">
            <fileset dir="${src.java.dir}/">
                <include name="**/*.properties"/>
				<include name="**/*.info"/>
                <include name="**/*.xml"/>
                <include name="**/*.dtd"/>
            </fileset>
        </copy>

		<jar jarfile="${dist.bin.dir}/boot.jar">
			<fileset dir="${build.temp.dir}">
				<include name="org/areasy/boot/"/>
			</fileset>
			<manifest>
				<attribute name="Product-Name" value="${project.name}"/>
				<attribute name="Product-Description" value="${project.description}"/>
				<attribute name="Product-Version" value="${project.version}.${build.number}"/>
				<attribute name="Product-Vendor" value="${project.vendor}"/>
				<attribute name="Product-Years" value="${project.years}"/>
				<attribute name="Main-Class" value="org.areasy.boot.Main"/>
			</manifest>
		</jar>

        <jar jarfile="${dist.libs.dir}/${library.jar}">
            <fileset dir="${build.temp.dir}">
                <include name="org/areasy/common/"/>
				<include name="org/areasy/runtime/"/>
           </fileset>
			<manifest>
				<attribute name="Product-Name" value="${project.name}"/>
				<attribute name="Product-Description" value="${project.description}"/>
				<attribute name="Product-Version" value="${project.version}.${build.number}"/>
				<attribute name="Product-Vendor" value="${project.vendor}"/>
                <attribute name="Product-Years" value="${project.years}"/>
            </manifest>
		</jar>
	</target>


	<!-- Generates the module's API documentation -->
    <target name="3.Doc" depends="1.Init, 2.Bin" unless="uptodate-doc" description="Generates API documentation">

		<copyfile src="${src.doc.dir}/doclet.properties" dest="${build.temp.dir}/doclet.properties"/>
		<copyfile src="${src.doc.dir}/documentation.html" dest="${build.temp.dir}/documentation.html"/>

        <replace file="${build.temp.dir}/doclet.properties" token="%year%" value="${project.years}"/>
        <replace file="${build.temp.dir}/doclet.properties" token="%vendor%" value="${project.vendor}"/>
        <replace file="${build.temp.dir}/doclet.properties" token="%fullname%" value="${project.fullname}"/>
        <replace file="${build.temp.dir}/doclet.properties" token="%version%" value="${project.version}.${build.number}"/>

		<copy overwrite="true" todir="${build.temp.dir}/resources">
            <fileset dir="${src.doc.dir}/resources">
				<include name="*.png"/>
			</fileset>
		</copy>

        <javadoc doclet="org.areasy.common.doclet.Doclet"
            classpathref="classpath.bin"
            maxmemory="256M" docletpathref="classpath.doc"
            packagenames="org.areasy.*"
            sourcepath="${src.java.dir}"
            additionalparam="-pdf '${dist.doc.dir}/${documentation.pdf}' -config '${build.temp.dir}/doclet.properties'"
            private="no"/>

		<copy overwrite="true" todir="${dist.doc.dir}">
            <fileset dir="${src.doc.dir}/resources">
				<include name="*.pdf"/>
			</fileset>
		</copy>
    </target>


	<!-- Create environment -->
    <target name="4.Dist" depends="1.Init" description="Create distribution">
		<antcall target="2.Bin"/>

		<mkdir dir="${dist.dir}/bin"/>
		<mkdir dir="${dist.dir}/bin/tools"/>
		<mkdir dir="${dist.dir}/work"/>
		<mkdir dir="${dist.doc.dir}/samples"/>

        <copy todir="${dist.dir}/bin">
            <fileset dir="${src.dir}/env">
				<exclude name=".svn/"/>
				<include name="*.jar"/>
				<include name="*.bat"/>
				<include name="*.sh"/>
				<include name="*.exe"/>
			</fileset>
		</copy>
        <copy todir="${dist.dir}/bin/tools">
            <fileset dir="${src.dir}/env/tools">
				<exclude name=".svn/"/>
				<include name="*.jar"/>
				<include name="*.bat"/>
				<include name="*.sh"/>
				<include name="*.exe"/>
			</fileset>
		</copy>
        <copy todir="${dist.cfg.dir}" overwrite="yes">
            <fileset dir="${src.dir}/cfg">
				<exclude name=".svn/"/>
				<include name="*.properties"/>
			</fileset>
		</copy>
		<copy todir="${dist.doc.dir}/samples">
            <fileset dir="${src.doc.dir}/samples"/>
		</copy>
		<copy todir="${dist.libs.dir}">
            <fileset dir="${libs.dir}">
				<exclude name=".svn/"/>				
				<include name="*.jar"/>
			</fileset>
		</copy>
	</target>

</project>
